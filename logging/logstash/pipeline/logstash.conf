input {
  beats {
    port => 5044
  }
  
  tcp {
    port => 5000
    codec => json_lines
  }
  
  udp {
    port => 5000
    codec => json_lines
  }
}

filter {
  # Parse JSON logs
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
    }
  }
  
  # Parse timestamp
  if [timestamp] {
    date {
      match => [ "timestamp", "ISO8601" ]
    }
  }
  
  # Parse log level
  if [level] {
    mutate {
      add_field => { "log_level" => "%{level}" }
    }
  }
  
  # Parse application fields
  if [logger] {
    mutate {
      add_field => { "service" => "image-classifier" }
    }
  }
  
  # Parse request information
  if [endpoint] {
    mutate {
      add_field => { "request_type" => "api" }
    }
  }
  
  # Parse classification information
  if [model_name] {
    mutate {
      add_field => { "request_type" => "classification" }
    }
  }
  
  # Parse error information
  if [error_type] {
    mutate {
      add_field => { "request_type" => "error" }
    }
  }
  
  # Add tags based on log level
  if [level] == "ERROR" {
    mutate {
      add_tag => [ "error" ]
    }
  }
  
  if [level] == "WARNING" {
    mutate {
      add_tag => [ "warning" ]
    }
  }
  
  if [level] == "INFO" {
    mutate {
      add_tag => [ "info" ]
    }
  }
  
  # Parse response time for performance analysis
  if [response_time] {
    mutate {
      convert => { "response_time" => "float" }
    }
  }
  
  # Parse confidence score for classification analysis
  if [confidence] {
    mutate {
      convert => { "confidence" => "float" }
    }
  }
  
  # Parse image size for resource analysis
  if [image_size] {
    mutate {
      convert => { "image_size" => "integer" }
    }
  }
  
  # Parse status code for HTTP analysis
  if [status_code] {
    mutate {
      convert => { "status_code" => "integer" }
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "image-classifier-logs-%{+YYYY.MM.dd}"
    template_name => "image-classifier-logs"
    template => "/usr/share/logstash/templates/image-classifier-template.json"
    template_overwrite => true
  }
  
  # Debug output (remove in production)
  stdout {
    codec => rubydebug
  }
}
