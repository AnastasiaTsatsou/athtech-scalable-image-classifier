input {
  beats {
    port => 5044
  }
}

filter {
  # Parse JSON logs from event.original field (multiline logs)
  if [event][original] {
    # Use a more reliable approach to parse multiline JSON
    ruby {
      code => '
        original_text = event.get("[event][original]")
        if original_text && original_text.is_a?(String)
          # Split by newlines and process each line
          lines = original_text.split("\n")
          lines.each do |line|
            line = line.strip
            # Look for complete JSON objects
            if line.start_with?("{") && line.end_with?("}")
              begin
                parsed_log = JSON.parse(line)
                # Process ALL JSON lines, prioritizing those with response_time/status_code
                if parsed_log.key?("response_time") || parsed_log.key?("status_code")
                  # This is a "Request completed" log - use this one
                  parsed_log.each do |key, value|
                    event.set(key, value)
                  end
                  break # Use this log as it has the metrics we need
                elsif parsed_log.key?("endpoint") && !event.get("response_time")
                  # This is a "Request started" log - use if we don\'t have completion data
                  parsed_log.each do |key, value|
                    event.set(key, value)
                  end
                end
              rescue => e
                # Skip invalid JSON lines
              end
            end
          end
        end
      '
    }
  }
  
  # Parse JSON logs if they exist in message field
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
    }
  }
  
  # Add basic fields
  mutate {
    add_field => { "service" => "image-classifier" }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "image-classifier-logs"
    template_name => "image-classifier-logs"
    template_overwrite => true
    ilm_enabled => true
    ilm_policy => "log-retention-policy"
    ilm_pattern => "000001"
    ilm_rollover_alias => "image-classifier-logs"
  }
  
  # Debug output
  stdout {
    codec => rubydebug
  }
}